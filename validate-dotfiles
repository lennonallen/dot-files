#!/bin/bash

# =============================================================================
# Dotfiles Validation Script
# =============================================================================
# This script validates that your dotfiles setup is working correctly
# Usage: ./validate-dotfiles
# =============================================================================

set -e
set -o pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counters
TESTS_PASSED=0
TESTS_FAILED=0
WARNINGS=0

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[PASS]${NC} $1"
    TESTS_PASSED=$((TESTS_PASSED + 1))
}

log_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
    WARNINGS=$((WARNINGS + 1))
}

log_error() {
    echo -e "${RED}[FAIL]${NC} $1"
    TESTS_FAILED=$((TESTS_FAILED + 1))
}

# Test shell configuration
test_shell() {
    log_info "Testing shell configuration..."
    
    # Check if zsh is the default shell
    if [[ "$SHELL" == *"zsh" ]]; then
        log_success "zsh is the default shell"
    else
        log_error "zsh is not the default shell (current: $SHELL)"
    fi
    
    # Check if .zshrc exists and is sourced
    if [[ -f "$HOME/.zshrc" ]]; then
        log_success ".zshrc file exists"
        
        # Test if dotfiles directory is being sourced
        if grep -q "dotfiles/.zsh" "$HOME/.zshrc"; then
            log_success ".zshrc sources dotfiles modules"
        else
            log_error ".zshrc doesn't source dotfiles modules"
        fi
    else
        log_error ".zshrc file not found"
    fi
}

# Test environment variables
test_environment() {
    log_info "Testing environment variables..."
    
    # Check critical environment variables
    local env_vars=(
        "EDITOR"
        "PATH"
        "HISTSIZE"
    )
    
    for var in "${env_vars[@]}"; do
        if [[ -n "${!var}" ]]; then
            log_success "$var is set (${!var})"
        else
            log_warning "$var is not set"
        fi
    done
    
    # Check if .env file exists
    if [[ -f "$HOME/dotfiles/.env" ]]; then
        log_success ".env file exists"
        
        # Check if TODOIST_API_TOKEN is set (but don't show value)
        if [[ -n "$TODOIST_API_TOKEN" ]]; then
            log_success "TODOIST_API_TOKEN is loaded"
        else
            log_warning "TODOIST_API_TOKEN not set (check .env file)"
        fi
    else
        log_warning ".env file not found (some features may not work)"
    fi
}

# Test aliases
test_aliases() {
    log_info "Testing aliases..."
    
    # Test common aliases
    local aliases=(
        "ll"
        "la"
        "gs" 
        "reload"
        "c"
    )
    
    for alias_name in "${aliases[@]}"; do
        if zsh -c "source ~/.zshrc && alias $alias_name" &>/dev/null; then
            log_success "Alias '$alias_name' is defined"
        else
            log_error "Alias '$alias_name' not found"
        fi
    done
}

# Test functions
test_functions() {
    log_info "Testing custom functions..."
    
    # Test custom functions
    local functions=(
        "mkcd"
        "extract"
        "todoist"
        "proton-sync"
        "server-sync"
        "dot"
        "nmd"
    )
    
    for func in "${functions[@]}"; do
        if zsh -c "source ~/.zshrc && declare -f $func" &>/dev/null; then
            log_success "Function '$func' is defined"
        else
            log_error "Function '$func' not found"
        fi
    done
}

# Test external dependencies
test_dependencies() {
    log_info "Testing external dependencies..."
    
    # Required tools
    local required_tools=(
        "git"
        "curl"
        "zsh"
    )
    
    for tool in "${required_tools[@]}"; do
        if command -v "$tool" &>/dev/null; then
            log_success "$tool is installed ($(command -v "$tool"))"
        else
            log_error "$tool is required but not found"
        fi
    done
    
    # Optional tools
    local optional_tools=(
        "fzf"
        "zoxide"
        "nvim"
        "oh-my-posh"
        "brew"
        "rsync"
    )
    
    for tool in "${optional_tools[@]}"; do
        if command -v "$tool" &>/dev/null; then
            log_success "$tool is installed ($(command -v "$tool"))"
        else
            log_warning "$tool not found (some features may not work)"
        fi
    done
}

# Test git configuration
test_git() {
    log_info "Testing git configuration..."
    
    # Check git user configuration
    local git_name=$(git config --global user.name 2>/dev/null || echo "")
    local git_email=$(git config --global user.email 2>/dev/null || echo "")
    
    if [[ -n "$git_name" ]]; then
        log_success "Git user.name is set ($git_name)"
    else
        log_error "Git user.name is not set"
    fi
    
    if [[ -n "$git_email" ]]; then
        log_success "Git user.email is set ($git_email)"
    else
        log_error "Git user.email is not set"
    fi
    
    # Check default branch
    local default_branch=$(git config --global init.defaultBranch 2>/dev/null || echo "")
    if [[ "$default_branch" == "main" ]]; then
        log_success "Git default branch is 'main'"
    else
        log_warning "Git default branch is not 'main' (current: ${default_branch:-'not set'})"
    fi
    
    # Check global gitignore
    local gitignore=$(git config --global core.excludesfile 2>/dev/null || echo "")
    if [[ -n "$gitignore" ]] && [[ -f "$gitignore" ]]; then
        log_success "Global gitignore is configured and exists"
    else
        log_error "Global gitignore not properly configured"
    fi
}

# Test file permissions and symlinks
test_files() {
    log_info "Testing file permissions and symlinks..."
    
    # Check if install script is executable
    if [[ -x "$HOME/dotfiles/install.sh" ]]; then
        log_success "install.sh is executable"
    else
        log_warning "install.sh is not executable"
    fi
    
    # Check if validation script is executable
    if [[ -x "$HOME/dotfiles/validate-dotfiles" ]]; then
        log_success "validate-dotfiles is executable"
    else
        log_warning "validate-dotfiles is not executable"
    fi
    
    # Check symlinks (if using symlinked approach)
    if [[ -L "$HOME/.zshrc" ]]; then
        local target=$(readlink "$HOME/.zshrc")
        if [[ -f "$target" ]]; then
            log_success ".zshrc symlink is valid"
        else
            log_error ".zshrc symlink is broken"
        fi
    fi
}

# Test specific integrations
test_integrations() {
    log_info "Testing tool integrations..."
    
    # Test FZF integration
    if command -v fzf &>/dev/null; then
        if [[ -n "$FZF_DEFAULT_OPTS" ]]; then
            log_success "FZF is configured"
        else
            log_warning "FZF is installed but not configured"
        fi
    fi
    
    # Test zoxide integration
    if command -v zoxide &>/dev/null; then
        if zsh -c "source ~/.zshrc && declare -f z" &>/dev/null; then
            log_success "Zoxide is integrated"
        else
            log_warning "Zoxide is installed but not integrated"
        fi
    fi
    
    # Test oh-my-posh integration
    if command -v oh-my-posh &>/dev/null; then
        if [[ -n "$POSH_THEME" ]] || ps -o command= -p $$ | grep -q oh-my-posh; then
            log_success "Oh-my-posh is active"
        else
            log_warning "Oh-my-posh is installed but not active"
        fi
    fi
}

# Test directory structure
test_structure() {
    log_info "Testing dotfiles directory structure..."
    
    local required_files=(
        "$HOME/dotfiles/.zsh/aliases.zsh"
        "$HOME/dotfiles/.zsh/functions.zsh"
        "$HOME/dotfiles/.zsh/exports.zsh"
        "$HOME/dotfiles/.zsh/completions.zsh"
        "$HOME/dotfiles/.zsh/git.zsh"
        "$HOME/dotfiles/.zsh/fzf.zsh"
        "$HOME/dotfiles/.zsh/zoxide.zsh"
        "$HOME/dotfiles/.zsh/prompt.zsh"
        "$HOME/dotfiles/.zsh/maintenance.zsh"
    )
    
    for file in "${required_files[@]}"; do
        if [[ -f "$file" ]]; then
            log_success "$(basename "$file") exists"
        else
            log_error "$(basename "$file") is missing"
        fi
    done
}

# Main validation function
main() {
    echo "üîç Validating dotfiles configuration..."
    echo "=================================="
    echo
    
    test_shell
    echo
    test_structure
    echo
    test_environment
    echo
    test_aliases
    echo
    test_functions
    echo
    test_dependencies
    echo
    test_git
    echo
    test_files
    echo
    test_integrations
    echo
    
    # Summary
    echo "=================================="
    echo "üìä Validation Summary"
    echo "=================================="
    
    if [[ $TESTS_FAILED -eq 0 ]]; then
        log_success "All tests passed! ($TESTS_PASSED passed, $WARNINGS warnings)"
        echo
        echo "üéâ Your dotfiles are configured correctly!"
        if [[ $WARNINGS -gt 0 ]]; then
            echo "‚ö†Ô∏è  Consider addressing the warnings above for optimal experience."
        fi
        exit 0
    else
        log_error "Some tests failed ($TESTS_PASSED passed, $TESTS_FAILED failed, $WARNINGS warnings)"
        echo
        echo "‚ùå Please fix the issues above and run validation again."
        exit 1
    fi
}

# Run main function
main "$@"